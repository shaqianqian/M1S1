////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 12.4
//  \   \         Application : sch2hdl
//  /   /         Filename : afficheur.vf
// /___/   /\     Timestamp : 11/28/2017 15:52:34
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog /home/m1/ma/aeo/tp8/afficheur.vf -w /home/m1/ma/aeo/tp8/afficheur.sch
//Design Name: afficheur
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_afficheur (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_afficheur(CEO, Q0, Q1, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module shiftanodes_MUSER_afficheur(clk, 
                                   Enable190, 
                                   anodes);

    input clk;
    input Enable190;
   output [3:0] anodes;
   
   wire [3:0] anodes_DUMMY;
   
   assign anodes[3:0] = anodes_DUMMY[3:0];
   FDE #( .INIT(1'b0) ) XLXI_1 (.C(clk), 
               .CE(Enable190), 
               .D(anodes_DUMMY[3]), 
               .Q(anodes_DUMMY[0]));
   FDE #( .INIT(1'b1) ) XLXI_2 (.C(clk), 
               .CE(Enable190), 
               .D(anodes_DUMMY[0]), 
               .Q(anodes_DUMMY[1]));
   FDE #( .INIT(1'b1) ) XLXI_3 (.C(clk), 
               .CE(Enable190), 
               .D(anodes_DUMMY[1]), 
               .Q(anodes_DUMMY[2]));
   FDE #( .INIT(1'b1) ) XLXI_4 (.C(clk), 
               .CE(Enable190), 
               .D(anodes_DUMMY[2]), 
               .Q(anodes_DUMMY[3]));
endmodule
`timescale 1ns / 1ps

module mux4x4_MUSER_afficheur(I0, 
                              I1, 
                              I2, 
                              I3, 
                              s, 
                              O);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] O;
   
   wire XLXN_42;
   
   (* HU_SET = "XLXI_1_0" *) 
   M4_1E_HXILINX_afficheur  XLXI_1 (.D0(I0[3]), 
                                   .D1(I1[3]), 
                                   .D2(I2[3]), 
                                   .D3(I3[3]), 
                                   .E(XLXN_42), 
                                   .S0(s[0]), 
                                   .S1(s[1]), 
                                   .O(O[3]));
   (* HU_SET = "XLXI_2_1" *) 
   M4_1E_HXILINX_afficheur  XLXI_2 (.D0(I0[2]), 
                                   .D1(I1[2]), 
                                   .D2(I2[2]), 
                                   .D3(I3[2]), 
                                   .E(XLXN_42), 
                                   .S0(s[0]), 
                                   .S1(s[1]), 
                                   .O(O[2]));
   (* HU_SET = "XLXI_3_2" *) 
   M4_1E_HXILINX_afficheur  XLXI_3 (.D0(I0[1]), 
                                   .D1(I1[1]), 
                                   .D2(I2[1]), 
                                   .D3(I3[1]), 
                                   .E(XLXN_42), 
                                   .S0(s[0]), 
                                   .S1(s[1]), 
                                   .O(O[1]));
   (* HU_SET = "XLXI_4_3" *) 
   M4_1E_HXILINX_afficheur  XLXI_4 (.D0(I0[0]), 
                                   .D1(I1[0]), 
                                   .D2(I2[0]), 
                                   .D3(I3[0]), 
                                   .E(XLXN_42), 
                                   .S0(s[0]), 
                                   .S1(s[1]), 
                                   .O(O[0]));
   VCC  XLXI_9 (.P(XLXN_42));
endmodule
`timescale 1ns / 1ps

module afficheur(clk, 
                 din, 
                 E190, 
                 state7seg, 
                 anodes, 
                 sevenseg);

    input clk;
    input [15:0] din;
    input E190;
    input [1:0] state7seg;
   output [3:0] anodes;
   output [6:0] sevenseg;
   
   wire [1:0] sel;
   wire [3:0] XLXN_2;
   
   x7seg  XLXI_1 (.state(state7seg[1:0]), 
                 .sw(XLXN_2[3:0]), 
                 .sevenseg(sevenseg[6:0]));
   (* HU_SET = "XLXI_2_4" *) 
   CB2CE_HXILINX_afficheur  XLXI_2 (.C(clk), 
                                   .CE(E190), 
                                   .CLR(), 
                                   .CEO(), 
                                   .Q0(sel[0]), 
                                   .Q1(sel[1]), 
                                   .TC());
   mux4x4_MUSER_afficheur  XLXI_3 (.I0(din[3:0]), 
                                  .I1(din[7:4]), 
                                  .I2(din[11:8]), 
                                  .I3(din[15:12]), 
                                  .s(sel[1:0]), 
                                  .O(XLXN_2[3:0]));
   shiftanodes_MUSER_afficheur  XLXI_34 (.clk(clk), 
                                        .Enable190(E190), 
                                        .anodes(anodes[3:0]));
endmodule
